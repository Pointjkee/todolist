{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.tsx","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","console","log","tasks","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","DeleteOutline","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","justifyContent","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","handleChange","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed934ad5.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1f886700-a829-4416-bf51-a1d8fa58d064'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: any) {\r\n        return instance.post('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<authmeType>>('auth/me');\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login');\r\n    }\r\n}\r\n\r\nexport type loginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string,\r\n}\r\nexport type authmeType = {\r\n    id:number,\r\n    login:string,\r\n    email:string,\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authApi, loginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value:boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// export const {setIsLoggedInAC} = slice.actions    //- тоже самое\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\nexport const loginTC = (data: loginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authApi.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value:true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value:false}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state: { error: null | string }, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: string }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const setAppErrorAC = slice.actions.setAppErrorAC\r\nexport const setAppStatusAC = slice.actions.setAppStatusAC\r\nexport const setIsInitializedAC = slice.actions.setIsInitializedAC\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authApi.me().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        }\r\n    })\r\n        .finally(() => dispatch(setIsInitializedAC({isInitialized: true})))\r\n}\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            //@ts-ignore\r\n            const index: number = state.findIndex(tl => tl.id === action.payload.id)\r\n            // state.filter(tl => tl.id !== action.payload.id)\r\n\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n\r\n            const index: number = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            //@ts-ignore\r\n            const index: number = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            //@ts-ignore\r\n            const index: number = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\n/*(state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n        return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n        return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n\r\n}*/\r\n\r\n\r\nexport const removeTodolistAC = slice.actions.removeTodolistAC\r\nexport const addTodolistAC = slice.actions.addTodolistAC\r\nexport const changeTodolistTitleAC = slice.actions.changeTodolistTitleAC\r\nexport const changeTodolistFilterAC = slice.actions.changeTodolistFilterAC\r\nexport const changeTodolistEntityStatusAC = slice.actions.changeTodolistEntityStatusAC\r\nexport const setTodolistsAC = slice.actions.setTodolistsAC\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType, removeTodolistAC,\r\n    RemoveTodolistActionType,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            //@ts-ignore\r\n            const index: number = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId)\r\n            debugger\r\n            if (index > -1) {\r\n                state[action.payload.todolistId].splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            //@ts-ignore\r\n            const index: number = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                state[action.payload.todolistId][index] = {...state[action.payload.todolistId][index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            console.log(state[action.payload.todolistId])\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n            console.log(state[action.payload.todolistId])\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            }\r\n        );\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n                delete state[action.payload.id]\r\n            }\r\n        );\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer /*(state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n// actions\r\n\r\n/*\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n*/\r\nexport const removeTaskAC = slice.actions.removeTaskAC\r\nexport const addTaskAC = slice.actions.addTaskAC\r\nexport const updateTaskAC = slice.actions.updateTaskAC\r\nexport const setTasksAC = slice.actions.setTasksAC\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({model: domainModel, taskId, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox, ControlPoint} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete, DeleteOutline} from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter:value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error:null}))\r\n    };\r\n\r\n    return (\r\n        //@ts-ignore\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.email}\r\n                                   name='email'\r\n                        />\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.password}\r\n                                   name='password'\r\n                        />\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          onChange={formik.handleChange}\r\n                                          checked={formik.values.rememberMe}\r\n                                          name='rememberMe'\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, string>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logOutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" >\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>LogOut</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='login' element={<Login/>}/>\r\n                    <Route path=\"*\" element={<Navigate to='/404'/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}