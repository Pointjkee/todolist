{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditSpan.tsx","Task.tsx","TodoList.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","multiline","maxRows","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","ControlPoint","EditSpan","console","log","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Task","changeStatus","useCallback","changeTaskStatus","task","checked","changeTaksTitle","removeTask","ListItem","style","padding","margin","className","isDone","Checkbox","defaultChecked","Delete","TodoList","taskID","tasksForRender","tasks","filter","t","allBtnClass","activeBtnClass","addTask","changeTodoTitle","changeTodolistTitle","removeTodoList","DeleteOutline","List","map","Button","changeTodoListFilter","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListID","type","taskId","todoListId","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterActionCreator","action","tID","changeTodolistTitleActionCreator","addTodoList","v1","addTodoListActionCreator","todoListsComponents","tl","Grid","item","Paper","elevation","maxWidth","AppBar","position","Toolbar","justifyContent","edge","color","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","newTask","copyState","f","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7f1578f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {IconButton, TextField} from '@material-ui/core';\r\nimport React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                multiline\r\n                maxRows={4}\r\n                id=\"outlined-basic\"\r\n                label=\"Text area\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                // className={error ? \"error\" : \"\"}\r\n                error={!!error}\r\n                helperText={error && 'ERROR!!!'}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\nexport const EditSpan = React.memo((props: EditSpanType) => {\r\n    console.log('editSpan')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n    const onEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(true)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                size={'small'}\r\n                id=\"outlined-basic\"\r\n                label=\"Text area\"\r\n                variant=\"outlined\"\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}/>\r\n            : <span onDoubleClick={onEditMode}>\r\n                {props.title}\r\n        </span>\r\n    )\r\n})","import {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditSpan} from \"./EditSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType,\r\n    changeTaskStatus: (taskID: string, isDone: boolean) => void,\r\n    changeTaksTitle: (taskID: string, title: string) => void,\r\n    removeTask: (taskID: string) => void,\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const changeStatus =\r\n        useCallback((e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus\r\n        (props.task.id, e.currentTarget.checked), [props.changeTaskStatus, props.task.id])\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaksTitle(props.task.id, title)\r\n    }, [props.changeTaksTitle, props.task.id])\r\n    const removeTask = useCallback(() => props.removeTask(props.task.id), [props.removeTask, props.task.id])\r\n\r\n    return (\r\n        <ListItem\r\n            style={{padding: '0px', margin: '0px'}}\r\n            // key={t.id}\r\n            className={!props.task.isDone ? \"notCompleted\" : \"\"}>\r\n            <Checkbox\r\n                size={'small'}\r\n                defaultChecked\r\n                checked={props.task.isDone}\r\n                onChange={changeStatus}\r\n            />\r\n            <EditSpan title={props.task.title} changeTitle={changeTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditSpan} from \"./EditSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from '@material-ui/core';\r\nimport {Delete, DeleteOutline} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaksTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (tID: string, title: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n\r\n    const setAllFilter = () => props.changeTodoListFilter(\"all\", props.id)\r\n    const setActiveFilter = () => props.changeTodoListFilter(\"active\", props.id)\r\n    const setCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.id)\r\n\r\n    const removeTask = useCallback((taskID: string) => props.removeTask(taskID, props.id), [])\r\n    const changeTaksTitle = useCallback((taskID: string, title: string) => props.changeTaksTitle(taskID, title, props.id), [])\r\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean) => props.changeTaskStatus(taskID, isDone, props.id), [])\r\n\r\n    let tasksForRender = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForRender = tasksForRender.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForRender = tasksForRender.filter(t => t.isDone)\r\n    }\r\n\r\n    let allBtnClass = \"\";\r\n    if (props.filter === \"all\") {\r\n        allBtnClass = \"active-filter\"\r\n    }\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditSpan title={props.title} changeTitle={changeTodoTitle}/>\r\n                <IconButton onClick={() => props.removeTodoList(props.id)}>\r\n                    <DeleteOutline/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List>\r\n                {tasksForRender.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaksTitle={changeTaksTitle}\r\n                            removeTask={removeTask}\r\n                        />\r\n                    )\r\n                })\r\n                }\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilter}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    style={{margin: '0 3px'}}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodoListsType} from \"../App\";\r\n\r\nexport  type RemoveTodoListActionType = {\r\n    type: \"REMOVE-TODOLIST\",\r\n    todoListId: string\r\n}\r\nexport  type AddTodoListActionType = {\r\n    type: \"ADD-TODOLIST\",\r\n    title: string,\r\n    todoListId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    tID: string,\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\nlet initialState: Array<TodoListsType> = []\r\n\r\nexport type ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n\r\nexport const todolistsReducer = (todoLists: Array<TodoListsType> = initialState, action: ActionType): Array<TodoListsType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(f => f.id !== action.todoListId)\r\n        case \"ADD-TODOLIST\":\r\n            const todolist: TodoListsType = {\r\n                id: action.todoListId,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [...todoLists, todolist]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return todoLists.map(t => t.id === action.tID ? {...t, title: action.title} : t)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const removeTodoListActionCreator = (todoListId: string): RemoveTodoListActionType => {\r\n    //do something\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        todoListId: todoListId\r\n    }\r\n}\r\nexport const addTodoListActionCreator = (title: string): AddTodoListActionType => {\r\n    //do something\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        title,\r\n        todoListId: v1()\r\n    }\r\n}\r\nexport const changeTodolistTitleActionCreator = (todoListId: string, title: string): ChangeTodolistTitleActionType => {\r\n    //do something\r\n    return {\r\n        type: \"CHANGE-TODOLIST-TITLE\",\r\n        tID: todoListId,\r\n        title\r\n    }\r\n}\r\nexport const changeTodoListFilterActionCreator = (todoListId: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\r\n    //do something\r\n    return {\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        filter,\r\n        todoListID: todoListId\r\n    }\r\n}","import {TasksType, TaskType} from \"../App\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport  type FirstActionType = {\r\n    type: \"REMOVE_TASK\",\r\n    taskId: string,\r\n    todoListId: string\r\n}\r\nexport  type SecondActionType = {\r\n    type: \"ADD_TASK\",\r\n    todoListId: string,\r\n    title: string\r\n}\r\nexport  type changeTaskStatusActionType = {\r\n    type: \"CHANGE_TASK_STATUS\",\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\nexport  type changeTaskTitleActionType = {\r\n    type: \"CHANGE_TASK_TITLE\",\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nlet initialState: TasksType = {}\r\n\r\nexport type ActionType = FirstActionType | SecondActionType | changeTaskStatusActionType\r\n    | changeTaskTitleActionType | AddTodoListActionType | RemoveTodoListActionType\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionType): TasksType => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TASK\":\r\n            // state[action.todoListId] = state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n        case \"ADD_TASK\":\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\r\n        case \"CHANGE_TASK_STATUS\":\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)\r\n            }\r\n        case \"CHANGE_TASK_TITLE\":\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case \"ADD-TODOLIST\" :\r\n            return {...state, [action.todoListId]: []}\r\n        case \"REMOVE-TODOLIST\" :\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todoListId: string): FirstActionType => {\r\n    //do something\r\n    return {\r\n        type: \"REMOVE_TASK\",\r\n        taskId,\r\n        todoListId\r\n    }\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): SecondActionType => {\r\n    //do something\r\n    return {\r\n        type: \"ADD_TASK\",\r\n        title,\r\n        todoListId,\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): changeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE_TASK_STATUS',\r\n        taskID,\r\n        isDone,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): changeTaskTitleActionType => {\r\n    return {\r\n        type: 'CHANGE_TASK_TITLE',\r\n        taskID,\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListActionCreator,\r\n    changeTodoListFilterActionCreator,\r\n    changeTodolistTitleActionCreator, removeTodoListActionCreator,\r\n\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListsType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, todoListID))\r\n    }, [dispatch])\r\n    const changeTaksTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterActionCreator(todoListID, filter))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const action = removeTodoListActionCreator(todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((tID: string, title: string) => {\r\n        dispatch(changeTodolistTitleActionCreator(tID, title))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodoListActionCreator(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        /*  let tasksForRender = tasks[tl.id]\r\n          if (tl.filter === \"active\") {\r\n              tasksForRender = tasks[tl.id].filter(t => !t.isDone)\r\n          }\r\n          if (tl.filter === \"completed\") {\r\n              tasksForRender = tasks[tl.id].filter(t => t.isDone)\r\n          }*/\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={4} style={{padding: '5px 15px 10px', maxWidth: '280px'}}>\r\n                    <TodoList // TodoList()\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasks[tl.id]}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaksTitle={changeTaksTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                    />\r\n                </Paper>\r\n\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container\r\n                fixed>\r\n                <Grid container={true} style={{justifyContent: 'center', padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}