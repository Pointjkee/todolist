{"version":3,"sources":["AddItemForm.tsx","EditSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","multiline","maxRows","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","ControlPoint","EditSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","tasksList","tasks","map","t","ListItem","style","padding","margin","className","isDone","Checkbox","defaultChecked","checked","changeTaskStatus","changeTaksTitle","removeTask","Delete","allBtnClass","filter","activeBtnClass","changeTodolistTitle","removeTodoList","DeleteOutline","addTask","List","Button","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","todoListID","newTask","tl","f","tID","todoListsComponents","tasksForRender","Grid","item","Paper","elevation","maxWidth","AppBar","position","Toolbar","justifyContent","edge","color","Menu","Typography","Container","fixed","container","todolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9a4314b7.chunk.js","sourcesContent":["import {Button, IconButton, TextField} from '@material-ui/core';\r\nimport React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                multiline\r\n                maxRows={4}\r\n                id=\"outlined-basic\"\r\n                label=\"Text area\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                // className={error ? \"error\" : \"\"}\r\n                error={!!error}\r\n                helperText={error && 'ERROR!!!'}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\nexport const EditSpan = (props: EditSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n    const onEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(true)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                size={'small'}\r\n                id=\"outlined-basic\"\r\n                label=\"Text area\"\r\n                variant=\"outlined\"\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}/>\r\n            : <span onDoubleClick={onEditMode}>\r\n                {props.title}\r\n        </span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditSpan} from \"./EditSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from '@material-ui/core';\r\nimport {Delete, DeleteOutline} from '@material-ui/icons';\r\n\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaksTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (tID: string, title: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const tasksList = props.tasks.map(t => {\r\n        const changeStatus =\r\n            (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTitle = (title: string) => {\r\n            props.changeTaksTitle(t.id, title, props.id)\r\n        }\r\n\r\n        return (\r\n            <ListItem\r\n                style={{padding:'0px', margin:'0px'}}\r\n                key={t.id}\r\n                className={!t.isDone ? \"notCompleted\" : \"\"}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    defaultChecked\r\n                    checked={t.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <EditSpan title={t.title} changeTitle={changeTitle}/>\r\n                <IconButton onClick={() => props.removeTask(t.id, props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const setAllFilter = () => props.changeTodoListFilter(\"all\", props.id)\r\n    const setActiveFilter = () => props.changeTodoListFilter(\"active\", props.id)\r\n    const setCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.id)\r\n\r\n\r\n    let allBtnClass = \"\";\r\n    if (props.filter === \"all\") {\r\n        allBtnClass = \"active-filter\"\r\n    }\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodoTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditSpan title={props.title} changeTitle={changeTodoTitle}/>\r\n                <IconButton onClick={() => props.removeTodoList(props.id)}>\r\n                    <DeleteOutline/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List>\r\n                {tasksList}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilter}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    style={{margin: '0 3px'}}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\ntype TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoListID_1, title: 'todo1', filter: 'all'},\r\n        {id: todoListID_2, title: 'todo2', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksType>({\r\n        [todoListID_1]:\r\n            [\r\n                {id: v1(), title: \"JS\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"HTML\", isDone: true},\r\n            ],\r\n        [todoListID_2]:\r\n            [\r\n                {id: v1(), title: \"Milk\", isDone: false},\r\n                {id: v1(), title: \"Bread\", isDone: false},\r\n                {id: v1(), title: \"Meat\", isDone: true},\r\n\r\n            ]\r\n    })\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaksTitle = (taskID: string, title: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(f => f.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    const changeTodolistTitle = (tID: string, title: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === tID ? {...t, title} : t))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const todoListID = v1()\r\n        const todolist: TodoListsType = {\r\n            id: todoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, todolist])\r\n        setTasks({...tasks, [todoListID]: []})\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForRender = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForRender = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForRender = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <Grid item key={tl.id}>\r\n\r\n                <Paper elevation={4} style={{padding: '5px 15px 10px', maxWidth:'280px'}} >\r\n                    <TodoList // TodoList()\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForRender}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaksTitle={changeTaksTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                    />\r\n                </Paper>\r\n\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container\r\n                fixed>\r\n                <Grid container={true} style={{justifyContent: 'center', padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5} >\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}