{"version":3,"sources":["AddItemForm.tsx","EditSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","style","color","EditSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","tasksList","tasks","map","t","isDone","type","checked","changeTaskStatus","id","changeTaksTitle","removeTask","allBtnClass","filter","activeBtnClass","changeTodolistTitle","removeTodoList","addTask","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","todoListID","newTask","tl","f","tID","todoListsComponents","tasksForRender","todolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.db0e0f34.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n  }\r\n\r\nexport const AddItemForm = (props:AddItemFormType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if(trimmedTitle){\r\n            props.addItem(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(error){\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            <input\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div style={{color: \"red\"}}>Title is required!</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n\r\n}\r\n\r\nexport const EditSpan = (props: EditSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n    const onEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(true)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <input onBlur={offEditMode}\r\n                     autoFocus={true}\r\n                     value={title}\r\n                     onChange={changeTitle}\r\n                     onKeyPress={onKeyPressAddTask}/>\r\n            : <span onDoubleClick={onEditMode}>\r\n                {props.title}\r\n        </span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditSpan} from \"./EditSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaksTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (tID: string, title: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const tasksList = props.tasks.map(t => {\r\n        const changeStatus =\r\n            (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTitle = (title: string) => {\r\n            props.changeTaksTitle(t.id, title, props.id)\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={!t.isDone ? \"notCompleted\" : \"\"}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <EditSpan title={t.title} changeTitle={changeTitle}/>\r\n                <button onClick={() => props.removeTask(t.id, props.id)}>x</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const setAllFilter = () => props.changeTodoListFilter(\"all\", props.id)\r\n    const setActiveFilter = () => props.changeTodoListFilter(\"active\", props.id)\r\n    const setCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.id)\r\n\r\n\r\n    let allBtnClass = \"\";\r\n    if (props.filter === \"all\") {\r\n        allBtnClass = \"active-filter\"\r\n    }\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodoTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditSpan title={props.title} changeTitle={changeTodoTitle}/>\r\n                <button onClick={() => props.removeTodoList(props.id)}>x</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {tasksList}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilter}>All\r\n                </button>\r\n                <button\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilter}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\ntype TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoListID_1, title: 'todo1', filter: 'all'},\r\n        {id: todoListID_2, title: 'todo2', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksType>({\r\n        [todoListID_1]:\r\n            [\r\n                {id: v1(), title: \"JS\", isDone: false},\r\n                {id: v1(), title: \"CSS\", isDone: false},\r\n                {id: v1(), title: \"HTML\", isDone: true},\r\n            ],\r\n        [todoListID_2]:\r\n            [\r\n                {id: v1(), title: \"Milk\", isDone: false},\r\n                {id: v1(), title: \"Bread\", isDone: false},\r\n                {id: v1(), title: \"Meat\", isDone: true},\r\n\r\n            ]\r\n    })\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaksTitle = (taskID: string, title: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(f => f.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    const changeTodolistTitle = (tID: string, title: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === tID ? {...t, title} : t))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const todoListID = v1()\r\n        const todolist: TodoListsType = {\r\n            id: todoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, todolist])\r\n        setTasks({...tasks, [todoListID]: []})\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForRender = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForRender = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForRender = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <TodoList // TodoList()\r\n                id={tl.id}\r\n                key={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasksForRender}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTaksTitle={changeTaksTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListsComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}